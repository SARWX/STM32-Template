# name of executable   (имя исполняемого файла берется от названия папки из которой он компилится, т.е в которой выполняется make)

ELF=$(notdir $(CURDIR)).elf                    

# Tool path (папка со всеми инструметами gcc gdb и т.п.)

TOOLROOT=/opt/gcc-arm/bin

# Library path (стандартная библиотека СТМки в ней всякие функции лежат)

LIBROOT=/opt/STM32F10x_StdPeriph_Lib_V3.5.0

# Tools (а это уже конкретно присваиваем инструментам переменные)

CC=$(TOOLROOT)/arm-none-eabi-gcc
LD=$(TOOLROOT)/arm-none-eabi-gcc
AR=$(TOOLROOT)/arm-none-eabi-ar
AS=$(TOOLROOT)/arm-none-eabi-as

# Code Paths (пути к специфичным файлам: заголовочным, коду на си, и всяким разным)

DEVICE=$(LIBROOT)/Libraries/CMSIS/CM3/DeviceSupport/ST/STM32F10x
CORE=$(LIBROOT)/Libraries/CMSIS/CM3/CoreSupport
PERIPH=$(LIBROOT)/Libraries/STM32F10x_StdPeriph_Driver

# Search path for standard files (вот этот vpath какбы означает: если че, СИшные файлы ищи здесь: TEMPLATEROOT)

vpath %.c $(TEMPLATEROOT)

# Search path for perpheral library (все остальные vpath означают тоже самое, но в них поиск будет осуществляться во вторую, третью и т.д. очереди)

vpath %.c $(CORE)
vpath %.c $(PERIPH)/src
vpath %.c $(DEVICE)

# Search path for Library

vpath %.c $(TEMPLATEROOT)/Library/ff9/src
vpath %.c $(TEMPLATEROOT)/Library/ff9/src/option
vpath %.c $(TEMPLATEROOT)/Library

#  Processor specific (тип процессора, соответствующий линкер-скрипт, и стартап-файлы (один общий - систем; и один специфичный для value line) )

PTYPE = STM32F10X_MD_VL
LDSCRIPT = $(TEMPLATEROOT)/stm32f100.ld
STARTUP= startup_stm32f10x.o system_stm32f10x.o

# Compilation Flags

FULLASSERT = -DUSE_FULL_ASSERT

LDFLAGS+= -T$(LDSCRIPT) -mthumb -mcpu=cortex-m3 
CFLAGS+= -mcpu=cortex-m3 -mthumb 
CFLAGS+= -I$(TEMPLATEROOT) -I$(DEVICE) -I$(CORE) -I$(PERIPH)/inc -I.
CFLAGS+= -D$(PTYPE) -DUSE_STDPERIPH_DRIVER $(FULLASSERT)
CFLAGS+= -I$(TEMPLATEROOT)/Library/ff9/src -I$(TEMPLATEROOT)/Library

# ----------------Вот от сюда начинаются команды к исполнению, до этого были переменные-----------------

# Build executable 

$(ELF) : $(OBJS)
	$(LD) $(LDFLAGS) -o $@ $(OBJS) $(LDLIBS)

# compile and generate dependency info

%.o: %.c
	$(CC) -c $(CFLAGS) $< -o $@
	$(CC) -MM $(CFLAGS) $< > $*.d

# .s это ассемблерный код

%.o: %.s
	$(CC) -c $(CFLAGS) $< -o $@

clean:
	rm -f $(OBJS) $(OBJS:.o=.d) $(ELF) startup_stm32f* $(CLEANOTHER)

debug: $(ELF)
	arm-none-eabi-gdb $(ELF)


# pull in dependencies

-include $(OBJS:.o=.d)
